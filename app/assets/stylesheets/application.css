/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS (and SCSS, if configured) file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */
@import “material”;

.container {
    padding: 70px 0;
    text-align: center;
}

.game-board {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: 10px;
}

.options {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

#outer {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.mega-box {
    background-color: rgba(211, 211, 211, 0.822);
    border: lightgray 1px solid;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.mdl-button {
    background: rgb(158 158 158 / 78%) !important;
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .2), 0 1px 5px 0 rgba(0, 0, 0, .12);
}


body {
    --s: 25vmin;
    --p: calc(var(--s) / 2);
    --c1: pink;
    --c2: dodgerblue;
    --c3: white;
    --bg: var(--c3);
    --d: 4000ms;
    --e: cubic-bezier(0.76, 0, 0.24, 1);
    height: 100%;
    margin: 0;

    background-color: var(--bg);
    background-image:
        linear-gradient(45deg, var(--c1) 25%, transparent 25%),
        linear-gradient(-45deg, var(--c1) 25%, transparent 25%),
        linear-gradient(45deg, transparent 75%, var(--c2) 75%),
        linear-gradient(-45deg, transparent 75%, var(--c2) 75%);
    background-size: var(--s) var(--s);
    background-position:
        calc(var(--p) * 1) calc(var(--p) * 0),
        calc(var(--p) * -1) calc(var(--p) * 1),
        calc(var(--p) * 1) calc(var(--p) * -1),
        calc(var(--p) * -1) calc(var(--p) * 0);
    animation:
        color var(--d) var(--e) infinite,
        position var(--d) var(--e) infinite;
}

@keyframes color {

    0%,
    25% {
        --bg: var(--c3);
    }

    26%,
    50% {
        --bg: var(--c1);
    }

    51%,
    75% {
        --bg: var(--c3);
    }

    76%,
    100% {
        --bg: var(--c2);
    }
}

@keyframes position {
    0% {
        background-position:
            calc(var(--p) * 1) calc(var(--p) * 0),
            calc(var(--p) * -1) calc(var(--p) * 1),
            calc(var(--p) * 1) calc(var(--p) * -1),
            calc(var(--p) * -1) calc(var(--p) * 0);
    }

    25% {
        background-position:
            calc(var(--p) * 1) calc(var(--p) * 4),
            calc(var(--p) * -1) calc(var(--p) * 5),
            calc(var(--p) * 1) calc(var(--p) * 3),
            calc(var(--p) * -1) calc(var(--p) * 4);
    }

    50% {
        background-position:
            calc(var(--p) * 3) calc(var(--p) * 8),
            calc(var(--p) * -3) calc(var(--p) * 9),
            calc(var(--p) * 2) calc(var(--p) * 7),
            calc(var(--p) * -2) calc(var(--p) * 8);
    }

    75% {
        background-position:
            calc(var(--p) * 3) calc(var(--p) * 12),
            calc(var(--p) * -3) calc(var(--p) * 13),
            calc(var(--p) * 2) calc(var(--p) * 11),
            calc(var(--p) * -2) calc(var(--p) * 12);
    }

    100% {
        background-position:
            calc(var(--p) * 5) calc(var(--p) * 16),
            calc(var(--p) * -5) calc(var(--p) * 17),
            calc(var(--p) * 5) calc(var(--p) * 15),
            calc(var(--p) * -5) calc(var(--p) * 16);
    }
}

@media (prefers-reduced-motion) {
    body {
        animation: none;
    }
}